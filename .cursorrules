# üéØ MESTRE DA REDA√á√ÉO - ESPECIFICA√á√ïES COMPLETAS DO PROJETO

Este documento cont√©m todas as especifica√ß√µes t√©cnicas e de neg√≥cio da plataforma "Mestre da Reda√ß√£o", uma aplica√ß√£o educacional para corre√ß√£o de reda√ß√µes do ENEM.

## üìã VIS√ÉO GERAL DO NEG√ìCIO

### Modelo de Neg√≥cio
- **Plataforma B2C/B2B**: Corre√ß√£o de reda√ß√µes para estudantes individuais e institui√ß√µes parceiras
- **P√∫blico-alvo**: Estudantes preparando para ENEM, vestibulandos, escolas parceiras
- **Monetiza√ß√£o**: Assinaturas mensais com diferentes n√≠veis de acesso
- **Diferencial**: Corre√ß√£o humana por professores qualificados + materiais did√°ticos

### Stakeholders
1. **Alunos**: Usu√°rios finais que enviam reda√ß√µes
2. **Professores**: Corretores especializados em reda√ß√£o ENEM
3. **Institui√ß√µes Parceiras**: Escolas/cursos com acesso em lote
4. **Administradores**: Gest√£o da plataforma

## üèóÔ∏è ARQUITETURA T√âCNICA

### Stack Principal
- **Frontend**: Next.js 14 (App Router) + TypeScript
- **Backend**: Firebase (Firestore + Storage + Authentication + Functions)
- **UI Library**: Radix UI + Tailwind CSS + shadcn/ui
- **Estado**: Context API (Auth) + Custom Hooks
- **Deploy**: Firebase Hosting

### Estrutura de Pastas
```
app/
‚îú‚îÄ‚îÄ dashboard/           # √Årea do aluno
‚îú‚îÄ‚îÄ professor/          # √Årea do professor
‚îú‚îÄ‚îÄ api/               # API Routes do Next.js
‚îú‚îÄ‚îÄ hooks/             # Custom hooks
‚îú‚îÄ‚îÄ lib/               # Utilities e configura√ß√µes
‚îú‚îÄ‚îÄ login/             # Autentica√ß√£o
‚îî‚îÄ‚îÄ register/          # Cadastro

components/
‚îú‚îÄ‚îÄ ui/                # shadcn/ui components
‚îú‚îÄ‚îÄ auth-route.tsx     # Prote√ß√£o de rotas aluno
‚îú‚îÄ‚îÄ professor-route.tsx # Prote√ß√£o de rotas professor
‚îî‚îÄ‚îÄ subscription-guard.tsx # Prote√ß√£o baseada em assinatura

lib/
‚îú‚îÄ‚îÄ firebase.ts        # Configura√ß√£o Firebase
‚îú‚îÄ‚îÄ types.ts          # Tipos TypeScript
‚îú‚îÄ‚îÄ auth-context.tsx  # Context de autentica√ß√£o
‚îî‚îÄ‚îÄ utils.ts          # Utilit√°rios

hooks/
‚îú‚îÄ‚îÄ use-auth.ts       # Hook de autentica√ß√£o
‚îú‚îÄ‚îÄ use-subscription.ts # Hook de assinatura
‚îú‚îÄ‚îÄ use-essays.ts     # Hook de reda√ß√µes
‚îî‚îÄ‚îÄ [outros hooks]    # Hooks espec√≠ficos
```

## üîê SISTEMA DE AUTENTICA√á√ÉO

### Roles de Usu√°rio
```typescript
type UserRole = 'student' | 'professor'

interface User {
  id: string
  name: string
  email: string
  role: UserRole
  createdAt: Timestamp
  lastLogin: Timestamp
  couponUsed?: string
  partnerId?: string
}
```

### Fluxo de Autentica√ß√£o
1. **Cadastro**: Firebase Auth + cria√ß√£o de documento no Firestore
2. **Login**: Valida√ß√£o + redirecionamento baseado em role
3. **Prote√ß√£o de Rotas**: Components AuthRoute e ProfessorRoute
4. **Sess√£o**: Persist√™ncia autom√°tica via Firebase Auth

### Regras de Acesso
- **Alunos**: Dashboard, envio de reda√ß√µes, visualiza√ß√£o de corre√ß√µes
- **Professores**: Dashboard admin, corre√ß√£o de reda√ß√µes, gest√£o de materiais
- **Leitura**: P√∫blica para themes/proposals, autenticada para essays/users
- **Escrita**: Apenas usu√°rios autenticados, users apenas pr√≥prio documento

## üí∞ SISTEMA DE ASSINATURAS

### Tipos de Assinatura
```typescript
type SubscriptionType = 'free' | 'avulsa' | 'mestre' | 'private' | 'partner'

interface Subscription {
  id: string
  userId: string
  type: SubscriptionType
  status: 'active' | 'cancelled'
  tokens: {
    available: number
    unlimited: boolean
  }
  partnerInfo?: {
    institutionId: string
    institutionName: string
    contractEndDate: Timestamp
  }
  privateInfo?: {
    teacherId: string
    teacherName: string
  }
}
```

### Planos Dispon√≠veis
1. **Free (R$ 0,00)**: 0 corre√ß√µes, acesso apenas √†s propostas de reda√ß√£o
2. **Avulsa (R$ 15,00)**: 1 corre√ß√£o, acesso √†s propostas de reda√ß√£o
3. **Mestre (R$ 70,00/m√™s)**: 15 corre√ß√µes/m√™s, acesso completo (propostas, videoaulas, materiais)
4. **Private**: Aluno particular de professor, corre√ß√µes ilimitadas
5. **Partner**: Aluno de institui√ß√£o parceira, corre√ß√µes ilimitadas

### L√≥gica de Tokens
- **Planos Pagos**: Tokens mensais finitos
- **Private/Partner**: Tokens ilimitados (unlimited: true)
- **Consumo**: 1 token por reda√ß√£o enviada
- **Renova√ß√£o**: Autom√°tica todo m√™s (n√£o implementado ainda)

## üìù SISTEMA DE REDA√á√ïES

### Estrutura de Dados
```typescript
interface Essay {
  id: string
  userId: string
  files: { name: string; url: string }[]
  themeId: string
  status: 'pending' | 'done' | 'rejected'
  submittedAt: Timestamp
  correctedAt?: Timestamp
  correction?: {
    score: {
      coesaoTextual: number        // 0-200
      compreensaoProposta: number  // 0-200
      dominioNormaCulta: number    // 0-200
      propostaIntervencao: number  // 0-200
      selecaoArgumentos: number    // 0-200
      total: number                // 0-1000
    }
    status: 'pending' | 'done'
    feedback?: string
    audioFileUrl?: string
    correctionFileUrl?: string
    assignedTo?: string
    assignedAt?: Timestamp
    completedAt?: Timestamp
  }
}
```

### Fluxo de Corre√ß√£o
1. **Envio**: Aluno seleciona tema + envia arquivo PDF
2. **Fila**: Reda√ß√£o entra na fila de corre√ß√µes pendentes
3. **Atribui√ß√£o**: Professor seleciona reda√ß√£o para corrigir
4. **Corre√ß√£o**: Professor avalia 5 compet√™ncias + feedback textual/√°udio
5. **Entrega**: Aluno recebe nota + coment√°rios + arquivo corrigido

### Temas de Reda√ß√£o
- **Fonte**: Propostas hist√≥ricas do ENEM (2009-2024)
- **Armazenamento**: Collection `essayThemes` + Storage para PDFs
- **Categorias**: ENEM_PASSADO, SIMULADO, PERSONALIZADO
- **Ativa√ß√£o**: Temas podem ser ativados/desativados

## üéì SISTEMA DE VIDEOAULAS

### Estrutura de Dados
```typescript
interface Lesson {
  id: string
  title: string
  description: string
  videoUrl: string
  duration: number  // em segundos
  createdAt: Timestamp
  views: number
  active: boolean
}

interface LessonProgress {
  id: string
  userId: string
  lessonId: string
  progress: number      // 0-100
  lastWatched: Timestamp
  completed: boolean
}
```

### Funcionalidades
- **Upload**: Professores fazem upload de v√≠deos
- **Dura√ß√£o**: Extra√≠da automaticamente do arquivo
- **Progresso**: Acompanhamento individual por aluno
- **Visualiza√ß√£o**: Player HTML5 nativo
- **Marca√ß√£o**: Alunos podem marcar como "assistida"

## üìö SISTEMA DE MATERIAIS DID√ÅTICOS

### Estrutura Hier√°rquica
```typescript
interface Material {
  id: string
  type: 'folder' | 'file'
  name: string
  parentId: string | null  // null = pasta raiz
  createdAt: Timestamp
  updatedAt: Timestamp
  file?: {               // apenas para type: 'file'
    name: string
    url: string
    size: number
    type: string
  }
}
```

### Funcionalidades
- **Navega√ß√£o**: Sistema de pastas recursivo
- **Upload**: Apenas professores, arquivos PDF
- **Busca**: Por nome do material
- **Visualiza√ß√£o**: Iframe para PDFs + download
- **Breadcrumbs**: Navega√ß√£o hier√°rquica

## üë®‚Äçüè´ √ÅREA DO PROFESSOR

### Dashboard Principal
- **Estat√≠sticas**: Corre√ß√µes pendentes/conclu√≠das
- **Acesso R√°pido**: Links para principais funcionalidades
- **Navega√ß√£o**: Sidebar responsiva com menu principal

### Funcionalidades Espec√≠ficas
1. **Gest√£o de Videoaulas**: CRUD completo de aulas
2. **Corre√ß√£o de Reda√ß√µes**: Fila de corre√ß√µes + interface de avalia√ß√£o
3. **Material Did√°tico**: Upload e organiza√ß√£o de materiais
4. **Gest√£o de Alunos**: Visualiza√ß√£o + altera√ß√£o de status de assinatura
5. **Propostas**: Gest√£o de temas de reda√ß√£o (futuro)
6. **Relat√≥rios**: Analytics de performance (futuro)

### Sistema de Corre√ß√£o
- **Interface**: Visualizador PDF + formul√°rio de avalia√ß√£o
- **Compet√™ncias**: 5 crit√©rios do ENEM (0-200 cada)
- **Feedback**: Texto obrigat√≥rio + √°udio opcional + PDF marcado
- **Upload**: Storage para arquivos de corre√ß√£o
- **Rollback**: Limpeza autom√°tica em caso de erro

### Gest√£o de Alunos (Professor)
- **Interface Moderna**: Cards visuais com informa√ß√µes completas dos alunos
- **Estat√≠sticas Avan√ßadas**: Dashboard com m√©tricas de uso e distribui√ß√£o por plano
- **Filtros Inteligentes**: Busca por nome/email, filtros por plano, status e atividade
- **A√ß√µes R√°pidas**: Altera√ß√£o de plano diretamente nos cards
- **Modal de Detalhes**: Informa√ß√µes completas do aluno com estat√≠sticas de uso
- **Log de Mudan√ßas**: Registro autom√°tico de altera√ß√µes de plano
- **Responsivo**: Interface adaptada para mobile e desktop

#### Funcionalidades Implementadas
1. **Visualiza√ß√£o em Cards**: Cada aluno em um card com avatar, nome, email e estat√≠sticas
2. **Estat√≠sticas Visuais**: Total de alunos, distribui√ß√£o por plano, alunos ativos/inativos
3. **Filtros Avan√ßados**: Busca, filtros por plano, status de assinatura e atividade
4. **Altera√ß√£o de Plano**: Interface intuitiva para mudar plano do aluno
5. **Configura√ß√£o de Tokens**: Controle granular de tokens para alunos avulsos
6. **Modal Avan√ßado**: Interface completa com sele√ß√£o de plano, tokens extras e motivo
7. **Cria√ß√£o de Assinaturas**: Suporte para alunos sem assinatura pr√©via
8. **Log de Mudan√ßas**: Registro completo de altera√ß√µes com motivo e professor respons√°vel
9. **Detalhes Completos**: Modal com informa√ß√µes pessoais, estat√≠sticas e a√ß√µes
10. **Loading States**: Skeleton loading durante carregamento
11. **Toast Notifications**: Feedback visual para todas as a√ß√µes
12. **Logging**: Registro de todas as a√ß√µes para auditoria

#### Componentes Criados
- `StudentCard`: Card individual do aluno com a√ß√µes r√°pidas
- `StudentsStats`: Dashboard de estat√≠sticas gerais
- `PlanDistribution`: Gr√°fico de distribui√ß√£o por plano
- `StudentsFilters`: Interface de filtros avan√ßados
- `PlanChangeModal`: Modal completo para altera√ß√£o de planos
- `useProfessorStudents`: Hook customizado para gest√£o de dados

#### Regras de Neg√≥cio Implementadas
- **Planos Dispon√≠veis**: free, avulsa, mestre, private, partner
- **Tokens Configur√°veis**: Alunos avulsos podem receber tokens extras (0-50)
- **Planos Ilimitados**: private e partner t√™m tokens ilimitados
- **Cria√ß√£o Autom√°tica**: Assinaturas s√£o criadas automaticamente se n√£o existirem
- **Log de Auditoria**: Todas as mudan√ßas s√£o registradas com motivo e professor respons√°vel
- **Valida√ß√µes**: Interface previne mudan√ßas desnecess√°rias e valida dados

## üë®‚Äçüéì √ÅREA DO ALUNO

### Dashboard Principal
- **Status da Assinatura**: Plano atual + tokens dispon√≠veis
- **Reda√ß√µes Recentes**: Status de corre√ß√£o + notas
- **Aulas Recentes**: Progresso de visualiza√ß√£o
- **Acesso R√°pido**: Enviar nova reda√ß√£o, ver corre√ß√µes

### Funcionalidades Espec√≠ficas
1. **Envio de Reda√ß√µes**: Sele√ß√£o de tema + upload de arquivo
2. **Acompanhamento**: Status das reda√ß√µes em corre√ß√£o
3. **Visualiza√ß√£o de Corre√ß√µes**: Notas + feedback + downloads
4. **Videoaulas**: Cat√°logo + player + progresso
5. **Material Did√°tico**: Acesso somente leitura
6. **Gest√£o de Assinatura**: Upgrade/downgrade de planos

## üóÑÔ∏è ESTRUTURA DO BANCO DE DADOS (FIRESTORE)

### Collections Principais
```
users/                  # Perfis de usu√°rios
‚îú‚îÄ‚îÄ {userId}
‚îú‚îÄ‚îÄ role: 'student' | 'professor'
‚îî‚îÄ‚îÄ [dados do User]

subscriptions/          # Assinaturas dos usu√°rios
‚îú‚îÄ‚îÄ {subscriptionId}
‚îú‚îÄ‚îÄ userId: string
‚îî‚îÄ‚îÄ [dados do Subscription]

essays/                 # Reda√ß√µes enviadas
‚îú‚îÄ‚îÄ {essayId}
‚îú‚îÄ‚îÄ userId: string
‚îú‚îÄ‚îÄ themeId: string
‚îî‚îÄ‚îÄ [dados do Essay]

essayThemes/           # Temas de reda√ß√£o
‚îú‚îÄ‚îÄ {themeId}
‚îú‚îÄ‚îÄ title: string
‚îú‚îÄ‚îÄ category: string
‚îî‚îÄ‚îÄ file: {name, url}

lessons/               # Videoaulas
‚îú‚îÄ‚îÄ {lessonId}
‚îú‚îÄ‚îÄ title: string
‚îú‚îÄ‚îÄ videoUrl: string
‚îî‚îÄ‚îÄ [dados do Lesson]

lessonProgress/        # Progresso das aulas
‚îú‚îÄ‚îÄ {progressId}
‚îú‚îÄ‚îÄ userId: string
‚îú‚îÄ‚îÄ lessonId: string
‚îî‚îÄ‚îÄ [dados do LessonProgress]

materials/             # Material did√°tico
‚îú‚îÄ‚îÄ {materialId}
‚îú‚îÄ‚îÄ type: 'folder' | 'file'
‚îú‚îÄ‚îÄ parentId: string | null
‚îî‚îÄ‚îÄ [dados do Material]
```

### Padr√µes de Nomenclatura
- **IDs**: Gerados automaticamente pelo Firestore
- **Referencias**: Usar doc refs quando apropriado
- **Timestamps**: Sempre serverTimestamp() para consist√™ncia
- **Soft Delete**: Flag `active: boolean` ao inv√©s de deletar

## üìÅ FIREBASE STORAGE

### Estrutura de Pastas
```
/essays/
‚îú‚îÄ‚îÄ {userId}/
‚îî‚îÄ‚îÄ {timestamp}-{filename}

/corrections/
‚îú‚îÄ‚îÄ {essayId}/
‚îú‚îÄ‚îÄ audio-feedback
‚îú‚îÄ‚îÄ correction-pdf
‚îî‚îÄ‚îÄ marked-image

/lessons/
‚îî‚îÄ‚îÄ {timestamp}-{filename}

/materials/
‚îî‚îÄ‚îÄ {timestamp}-{filename}

/proposals/
‚îú‚îÄ‚îÄ materials/
‚îî‚îÄ‚îÄ examples/
```

### Regras de Seguran√ßa
- **Leitura**: P√∫blica para todos os arquivos
- **Escrita**: Apenas usu√°rios autenticados
- **Organiza√ß√£o**: Por tipo de conte√∫do + usu√°rio quando relevante

## üîß PADR√ïES DE DESENVOLVIMENTO

### Conven√ß√µes de C√≥digo
- **TypeScript**: Tipagem estrita obrigat√≥ria
- **Naming**: camelCase para JS, PascalCase para componentes
- **Imports**: Absolutos com alias `@/`
- **Error Handling**: Try/catch com toast notifications
- **Loading States**: Skeleton/spinner durante opera√ß√µes ass√≠ncronas

### Estrutura de Componentes
```typescript
// Padr√£o de p√°gina
'use client'
export default function ComponentName() {
  // 1. Hooks de estado
  // 2. Hooks customizados  
  // 3. Effects
  // 4. Handlers
  // 5. Render condicional
  // 6. JSX principal
}
```

### Custom Hooks
- **Nomenclatura**: `use[Funcionalidade]`
- **Retorno**: Object com `{data, loading, error}` quando aplic√°vel
- **Dependencies**: Array de depend√™ncias expl√≠cito no useEffect
- **Cleanup**: Cleanup functions quando necess√°rio

### Tratamento de Erros
- **Firebase**: Captura e tradu√ß√£o de erros
- **UI**: Toast notifications via Sonner
- **Logging**: Console.error com contexto
- **Fallbacks**: Loading states e mensagens de erro gracious

## üöÄ DEPLOY E CONFIGURA√á√ÉO

### Configura√ß√£o Firebase
```javascript
// firebase.json
{
  "hosting": {
    "source": ".",
    "frameworksBackend": {"region": "us-central1"},
    "cleanUrls": true,
    "headers": [/* CORS headers */]
  },
  "firestore": {"rules": "firestore.rules"},
  "storage": {"rules": "storage.rules"}
}
```

### Scripts NPM
```json
{
  "dev": "next dev",
  "build": "next build", 
  "firebase-build": "pnpm install && pnpm run build",
  "deploy": "firebase deploy"
}
```

### Vari√°veis de Ambiente
```
NEXT_PUBLIC_FIREBASE_API_KEY=
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=
NEXT_PUBLIC_FIREBASE_PROJECT_ID=
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=
NEXT_PUBLIC_FIREBASE_APP_ID=
NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=
```

## üéØ FUNCIONALIDADES IMPLEMENTADAS

### ‚úÖ Completas
- [x] Sistema de autentica√ß√£o com roles
- [x] Dashboard do aluno e professor
- [x] Sistema de assinaturas com m√∫ltiplos planos
- [x] Envio e corre√ß√£o de reda√ß√µes
- [x] Sistema de videoaulas com progresso
- [x] Material did√°tico hier√°rquico
- [x] Upload de arquivos com valida√ß√£o
- [x] Interface responsiva e moderna
- [x] Gest√£o de alunos pelo professor (INTERFACE MODERNA)
- [x] Sistema de busca e filtros
- [x] Chat aluno-professor com reda√ß√£o opcional

### üöß Em Desenvolvimento
- [ ] Sistema de notifica√ß√µes
- [ ] Chat entre aluno e professor
- [ ] Relat√≥rios e analytics
- [ ] Sistema de cupons/promo√ß√µes
- [ ] API de pagamentos
- [ ] Renova√ß√£o autom√°tica de assinaturas

### üìã Backlog
- [ ] Sistema de mentoria individual
- [ ] Banco de reda√ß√µes corrigidas
- [ ] Simulados cronometrados
- [ ] Gamifica√ß√£o (badges, rankings)
- [ ] App mobile
- [ ] Integra√ß√£o com WhatsApp
- [ ] Sistema de afiliados

## üêõ PROBLEMAS CONHECIDOS

### T√©cnicos
- [ ] TypeScript build errors ignorados (tempor√°rio)
- [ ] ESLint desabilitado durante build
- [ ] Alguns componentes sem proper error boundaries
- [ ] Falta valida√ß√£o de schema Zod em formul√°rios

### UX/UI
- [ ] Loading states inconsistentes
- [ ] Feedback de upload poderia ser melhor
- [ ] Mobile responsiveness em algumas p√°ginas
- [ ] Acessibilidade n√£o implementada completamente

### Performance
- [ ] Imagens n√£o otimizadas
- [ ] Bundle size n√£o analisado
- [ ] Queries Firestore poderiam usar pagination
- [ ] Storage downloads sem cache

### üîß CORRE√á√ïES RECENTES

#### ‚úÖ Firebase Configuration (Corrigido Completamente)
**Problema**: Erros no console relacionados a Firebase Analytics e API keys inv√°lidas
- `FirebaseError: Analytics: Dynamic config fetch failed`
- `FirebaseError: Firebase: Error (auth/invalid-api-key)`
- `FirebaseError: Installations: Generate Auth Token request failed`

**Causa Raiz Identificada**:
- API Key desatualizada no .env.local
- measurementId ausente para Firebase Analytics
- Configura√ß√£o incompleta do Analytics

**Solu√ß√£o Implementada**:
- **API Key atualizada**: De `AIzaSyC5wGKgU8RdKKjP5cGJjrYLGPXHfzBwAOY` para `AIzaSyABZJxTb4i_SDIBE-j530N1cGBwmkB054`
- **measurementId adicionado**: `G-37KFKM8TSH` para Firebase Analytics
- Valida√ß√£o de vari√°veis de ambiente obrigat√≥rias e opcionais
- Tratamento de erros espec√≠ficos para cada servi√ßo Firebase
- Analytics inicializado apenas se measurementId estiver presente
- Logs detalhados para debug de configura√ß√£o
- Script de teste `npm run test-firebase` para valida√ß√£o

**Arquivos corrigidos**: 
- `lib/firebase.ts` - Configura√ß√£o principal
- `.env.local` - Vari√°veis de ambiente atualizadas
- `scripts/test-firebase-config.js` - Script de valida√ß√£o
- `package.json` - Adicionado comando test-firebase

**Status**: ‚úÖ TOTALMENTE FUNCIONANDO - Todos os erros do Firebase resolvidos, Analytics operacional

#### ‚úÖ Erro de Cadastro com Campos Undefined (Corrigido Completamente)
**Problema**: Erro em produ√ß√£o durante cadastro de usu√°rios
- `Function setDoc() called with invalid data. Unsupported field value: undefined (found in field couponUsed in document users/RgxELvRebwg2buAc9D8kZamrKf2)`
- Usu√°rios viam mensagem t√©cnica de erro ao inv√©s de mensagem amig√°vel

**Causa Raiz Identificada**:
- Campos opcionais `couponUsed` e `partnerId` sendo enviados como `undefined` para o Firestore
- Firestore n√£o aceita valores `undefined`, apenas `null` ou omiss√£o do campo
- Tratamento de erro gen√©rico n√£o capturava erro espec√≠fico do Firestore

**Solu√ß√£o Implementada**:
- **Remo√ß√£o de campos undefined**: Campos opcionais s√≥ s√£o adicionados ao objeto se tiverem valor
- **Tratamento de erro espec√≠fico**: Detec√ß√£o do erro Unsupported field value: undefined
- **Mensagem amig√°vel**: "Erro interno do sistema. Por favor, tente novamente ou entre em contato com o suporte.
-**Valida√ß√£o de cupom**: Mantida valida√ß√£o de cupom inv√°lido com mensagem espec√≠fica

**Arquivos corrigidos**:
- `lib/auth-context.tsx` - L√≥gica de cria√ß√£o de documento do usu√°rio
- `app/register/page.tsx` - Tratamento de erros espec√≠ficos do Firestore

**Status**: ‚úÖ TOTALMENTE FUNCIONANDO - Cadastro funcionando corretamente, mensagens amig√°veis para usu√°rios

#### ‚úÖ Acesso √†s Videoaulas para Plano Mestre (Corrigido Completamente)
**Problema**: Usu√°rios com plano mestre n√£o conseguiam acessar videoaulas
- Verifica√ß√£o de acesso estava incorreta nas p√°ginas de videoaulas
- Plano mestre n√£o estava sendo inclu√≠do na verifica√ß√£o de acesso
- Mesmo problema ocorria com material did√°tico

**Causa Raiz Identificada**:
- Verifica√ß√£o `hasVideoAccess` estava verificando apenas `private` e `partner`
- Faltava incluir o plano `mestre` na verifica√ß√£o
- Mesmo problema em m√∫ltiplas p√°ginas: aulas, detalhes de aula, materiais

**Solu√ß√£o Implementada**:
- **Corre√ß√£o nas p√°ginas de videoaulas**: Adicionado `mestre` na verifica√ß√£o de acesso
- **Corre√ß√£o nas p√°ginas de materiais**: Adicionado `mestre` na verifica√ß√£o de acesso
- **Verifica√ß√£o consistente**: Todas as p√°ginas agora verificam `mestre`, `private` e `partner`
- **Componente SubscriptionGuard**: J√° estava correto, incluindo plano mestre

**Arquivos corrigidos**:
- `app/dashboard/aulas/page.tsx` - Lista de videoaulas
- `app/dashboard/aulas/[id]/page.tsx` - Detalhes da videoaula
- `app/dashboard/materiais/page.tsx` - Lista de materiais
- `app/dashboard/materiais/[id]/page.tsx` - Detalhes do material

**Status**: ‚úÖ TOTALMENTE FUNCIONANDO - Plano mestre agora libera acesso √†s videoaulas e materiais corretamente

#### ‚úÖ Problema de CORS no Firebase Storage (Corrigido Completamente)
**Problema**: Erro de CORS em loop impedindo upload de anexos no chat
- `Preflight response is not successful`
- `XMLHttpRequest cannot load https://firebasestorage.googleapis.com/...due to access control checks`
- Upload de anexos do chat falhando tanto para aluno quanto professor

**Causa Raiz Identificada**:
- Bucket Firebase Storage sem configura√ß√£o de CORS
- Nome incorreto do bucket no c√≥digo (`mestre-da-redacao.appspot.com` vs `mestre-da-redacao.firebasestorage.app`)
- Path de upload inconsistente no chat (`essays/${fileName}` vs `essays/${user.uid}/${fileName}`)
- gsutil com problemas de compatibilidade impedindo configura√ß√£o manual

**Solu√ß√£o Implementada**:
- **Bucket correto identificado**: `mestre-da-redacao.firebasestorage.app`
- **CORS configurado**: Via script personalizado usando @google-cloud/storage
- **Path corrigido**: Chat agora usa `essays/${user.uid}/${Date.now()}-${file.name}` (igual √†s reda√ß√µes)
- **Configura√ß√£o Firebase atualizada**: storageBucket correto no lib/firebase.ts
- **Script de teste criado**: Valida√ß√£o autom√°tica de upload e CORS

**Arquivos corrigidos**:
- `hooks/use-chat-attachments.ts` - Path de upload corrigido + valida√ß√£o de auth
- `lib/firebase.ts` - storageBucket atualizado para o nome correto
- `cors.json` - Headers adicionais para Firebase Storage
- `scripts/fix-cors-issue.js` - Script para configurar CORS via API
- `scripts/test-upload.js` - Teste automatizado de upload
- `package.json` - Novos scripts fix-cors e test-upload

**Configura√ß√£o CORS aplicada**:
```json
{
  "origin": ["*"],
  "method": ["GET", "POST", "PUT", "DELETE", "HEAD", "OPTIONS"],
  "maxAgeSeconds": 3600,
  "responseHeader": [
    "Content-Type", "Authorization", "Content-Length", 
    "User-Agent", "x-goog-resumable", "x-goog-content-length-range",
    "x-firebase-storage-version", "access-control-allow-origin",
    "access-control-allow-methods", "access-control-allow-headers"
  ]
}
```

**Status**: ‚úÖ TOTALMENTE FUNCIONANDO - Upload de anexos no chat funciona para aluno e professor, CORS configurado, testes automatizados passando

## üìö DOCUMENTA√á√ÉO ADICIONAL

### Links √öteis
- [Firebase Console](https://console.firebase.google.com)
- [Next.js Docs](https://nextjs.org/docs)
- [Tailwind CSS](https://tailwindcss.com/docs)
- [Radix UI](https://radix-ui.com)
- [shadcn/ui](https://ui.shadcn.com)

### Scripts de Configura√ß√£o
- `scripts/init-firestore.ts`: Inicializa√ß√£o do banco
- `scripts/popular-propostas.js`: Seed de temas de reda√ß√£o
- `deploy.sh`: Script de deploy automatizado

---

## üìù INSTRU√á√ïES PARA AGENTES

**IMPORTANTE**: Todo agente que interagir com este projeto DEVE:

1. **LER ESTE DOCUMENTO COMPLETO** antes de fazer qualquer altera√ß√£o
2. **SEGUIR OS PADR√ïES** de c√≥digo e arquitetura estabelecidos  
3. **ATUALIZAR ESTE DOCUMENTO** quando adicionar novas funcionalidades
4. **MANTER CONSIST√äNCIA** com as conven√ß√µes existentes
5. **TESTAR LOCALMENTE** antes de fazer deploy
6. **DOCUMENTAR MUDAN√áAS** em coment√°rios e commits claros

### Ao Adicionar Nova Funcionalidade:
1. Definir tipos TypeScript apropriados em `lib/types.ts`
2. Criar hooks customizados se necess√°rio
3. Seguir padr√£o de componentes estabelecido
4. Adicionar valida√ß√£o e tratamento de erros
5. Implementar loading states
6. Testar em mobile e desktop
7. **ATUALIZAR ESTE DOCUMENTO** com detalhes da nova funcionalidade

### Ao Corrigir Bugs:
1. Identificar causa raiz do problema
2. Implementar fix seguindo padr√µes existentes
3. Testar cen√°rios edge cases
4. **ATUALIZAR SE√á√ÉO "PROBLEMAS CONHECIDOS"** se aplic√°vel

### Ao Refatorar C√≥digo:
1. Manter compatibilidade com funcionalidades existentes
2. Atualizar documenta√ß√£o de componentes afetados
3. Verificar se tipos TypeScript ainda est√£o corretos
4. **ATUALIZAR ESTE DOCUMENTO** se arquitetura mudou

**LEMBRE-SE**: Este documento √© a fonte de verdade do projeto. Mantenha-o sempre atualizado para garantir que outros agentes tenham contexto completo do projeto.

---

*Documento criado em: 30/06/2025*
*√öltima atualiza√ß√£o: 30/06/2025* 

### Fluxo de Assinatura

#### Portas de Entrada
1. **Dashboard Principal** (`/dashboard`) - Bot√£o "Gerenciar" no card do plano
2. **P√°gina de Plano** (`/dashboard/plano`) - Acesso direto ou via redirecionamentos
3. **Redirecionamentos autom√°ticos** quando usu√°rio sem plano tenta acessar conte√∫do restrito

#### Regras de Neg√≥cio
- **Troca de Plano**: Apenas via WhatsApp com o Mestre (5521981120169)
- **Cancelamento**: Dispon√≠vel apenas para planos pagos (n√£o para private/partner)
- **Compra**: Processo manual via WhatsApp, sem gateway de pagamento
- **Cupons**: Institui√ß√µes parceiras fornecem cupons para acesso partner

#### Prote√ß√µes de Conte√∫do
- **Videoaulas**: Apenas planos mestre, private e partner
- **Material Did√°tico**: Apenas planos mestre, private e partner
- **Envio de Reda√ß√µes**: Todos os planos exceto free
- **Propostas de Reda√ß√£o**: Acesso p√∫blico para todos 

### Componente SubscriptionGuard

Componente para proteger rotas e funcionalidades baseado no tipo de assinatura do usu√°rio.

```typescript
<SubscriptionGuard 
  requiredPlan="mestre" 
  feature="videoaulas"
>
  <VideoPlayer />
</SubscriptionGuard>
```

**Props:**
- `requiredPlan`: Tipo m√≠nimo de plano necess√°rio
- `feature`: Tipo de funcionalidade (videoaulas, materiais, redacoes, propostas)
- `fallback`: Componente customizado para exibir quando sem acesso
- `children`: Conte√∫do a ser protegido

**Funcionalidades:**
- Verifica√ß√£o autom√°tica de assinatura
- UI de bloqueio com bot√£o para WhatsApp
- Redirecionamento para p√°gina de planos
- Loading states durante verifica√ß√£o 